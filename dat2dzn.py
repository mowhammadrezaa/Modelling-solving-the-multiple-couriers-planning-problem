import os
import math


def check_triangular_inequality(distance_matrix_):
    n = len(distance_matrix_)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if i != j and i != k and j != k:
                    if distance_matrix_[i][j] > distance_matrix_[i][k] + distance_matrix_[k][j]:
                        return False
    return True


def is_symmetric_m(matrix):
    # Check if the matrix is equal to its transpose
    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))


def read_dat_file(dat_file):
    with open(dat_file, 'r') as file:
        lines = file.readlines()

    m = int(lines[0].strip())  # Number of couriers
    n = int(lines[1].strip())  # Number of items
    capacities = sorted(list(map(int, lines[2].split())), reverse=True)  # Courier capacities
    item_sizes = list(map(int, lines[3].split()))  # Item sizes
    distance_matrix = [list(map(int, line.split())) for line in lines[4:]]

    # compute min-used capacities
    extra_resources = sum(capacities) - sum(item_sizes)
    # print(dat_file)
    # print(extra_resources)
    # print("__________________________")
    is_extra_resource_high = True if min(capacities) - extra_resources < 0 else False

    if is_extra_resource_high:
        min_used_capacities = [min(item_sizes)] * m
    else:
        min_used_capacities = [max(capacity - extra_resources, min(item_sizes)) for capacity in capacities]

    # compute max-used capacities
    max_used_capacities = []
    for capacity in capacities:
        if is_extra_resource_high:
            max_used_capacity = min(int((sum(item_sizes) / m) + 2 * max(item_sizes)), capacity)
        else:
            max_used_capacity = capacity
        max_used_capacities.append(max_used_capacity)

    # compute min durations
    min_durations = [min(math.ceil(min_used_capacity/max(item_sizes)), n-m+1)  # 10 - 7 = 3
                     # 1 - 1
                     # 2 - 1
                     # 3 - 1
                     # 7
                     for min_used_capacity in min_used_capacities]
    # compute max durations
    max_durations = []
    for capacity in max_used_capacities:
        s = 0
        counter = 0
        for item_size in sorted(item_sizes):
            s += item_size
            counter += 1
            if s >= capacity:
                break
        max_durations.append(counter)

    # print(dat_file,
    #       "m: ", m, "n: ", n,
    #       "Sum capacity: ", sum(capacities), "Sum item sizes: ", sum(item_sizes),
    #       "Average duration: ", n/m
    #       # {k: v for k, v in sorted(Counter(item_sizes).items(), key=lambda x: x[0], reverse=True)[:4]},
    #       # min_durations,
    #       # (sum(min_durations), n),
    #       # min_used_capacities,
    #       # max_used_capacities,
    #       # min_durations,
    #       # max_durations,
    #       )
    return (m, n,
            capacities,
            item_sizes,
            distance_matrix,
            is_symmetric_m(distance_matrix),
            min_used_capacities,
            max_used_capacities,
            min_durations,
            max_durations
            )


def write_dzn_file(
        dzn_file, m, n,
        capacities,
        item_sizes,
        distance_matrix,
        is_symmetric,
        min_used_capacities,
        max_used_capacities,
        min_durations,
        max_durations
):
    # with open(dzn_file, 'w') as file:
    #     file.write("% MCP DATA\n\n")
    #     file.write("% Set data parameters\n")
    #     file.write(f"m = {m}; % Number of couriers\n")
    #     file.write(f"n = {n}; % Number of items\n")
    #     file.write(f"capacity = {capacities}; % Courier capacities\n")
    #     file.write(f"itemSize = {item_sizes}; % Item sizes\n")
    #     file.write("distanceMatrix = [|")
    #     for row in distance_matrix:
    #         file.write(", ".join(map(str, row)) + "\n                  |")
    #     file.write("];\n")
    #     file.write(f"is_symmetric = {'true' if is_symmetric else 'false'};\n")
    #     file.write(f"min_used_capacities = {min_used_capacities};\n")
    #     file.write(f"max_used_capacities = {max_used_capacities};\n")
    #     file.write(f"min_durations = {min_durations};\n")
    #     file.write(f"max_durations = {max_durations};\n")
    return


if __name__ == "__main__":
    input_folder = "instances"
    output_folder = "output_instances"

    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith(".dat"):
            input_dat_file = os.path.join(input_folder, filename)
            output_dzn_file = os.path.join(output_folder, filename.replace(".dat", ".dzn"))

            # m, n, capacities, item_sizes, distance_matrix, is_symmetric, min_duration = read_dat_file(input_dat_file)
            write_dzn_file(output_dzn_file, *read_dat_file(input_dat_file))
            #
            # print(f"{output_dzn_file} has been created.")

    # 1..10 complete
    # 13 capacity ~ itemSizes, 16, 19, 21 incomplete, capacity way higher than itemSizes
    # 17, 18, 20 no solution, capacity ~ itemSizes


"""
_____________________________________________________________
1:
assignment = [4, 3, 1, 2, 5, 6];
start = [1, 4];
end = [3, 6];
used_capacity = [14, 10];
duration = [3, 3];
distance_traveled = [14, 14];
_objective = 14;
_____________________________________________________________
2:
assignment = [7, 3, 9, 8, 1, 4, 2, 5, 6];
start = [1, 3, 5, 7, 8, 9];
end = [2, 4, 6, 7, 8, 9];
used_capacity = [47, 34, 27, 11, 2, 1];
duration = [2, 2, 2, 1, 1, 1];
distance_traveled = [116, 215, 209, 226, 192, 192];
_objective = 226;
_____________________________________________________________
3:
assignment = [3, 6, 5, 2, 4, 1, 7];
start = [1, 4, 6];
end = [3, 5, 7];
used_capacity = [15, 10, 7];
duration = [3, 2, 2];
distance_traveled = [12, 10, 12];
_objective = 12;
_____________________________________________________________
4:
assignment = [10, 7, 9, 5, 2, 8, 3, 4, 6, 1];
start = [1, 3, 5, 6, 7, 8, 9, 10];
end = [2, 4, 5, 6, 7, 8, 9, 10];
used_capacity = [43, 37, 25, 19, 18, 16, 16, 10];
duration = [2, 2, 1, 1, 1, 1, 1, 1];
distance_traveled = [144, 81, 48, 220, 110, 109, 150, 106];
_objective = 220;
_____________________________________________________________
5:
assignment = [1, 3, 2];
start = [1, 3];
end = [2, 3];
used_capacity = [26, 17];
duration = [2, 1];
distance_traveled = [206, 160];
_objective = 206;
_____________________________________________________________
6:
assignment = [5, 2, 7, 8, 3, 1, 4, 6];
start = [1, 3, 5, 6, 7, 8];
end = [2, 4, 5, 6, 7, 8];
used_capacity = [44, 26, 21, 16, 14, 14];
duration = [2, 2, 1, 1, 1, 1];
distance_traveled = [310, 322, 56, 226, 202, 56];
_objective = 322;
_____________________________________________________________
7:
assignment = [12, 1, 4, 7, 14, 15, 16, 10, 8, 11, 3, 6, 17, 2, 13, 5, 9];
start = [1, 4, 7, 10, 13, 16];
end = [3, 6, 9, 12, 15, 17];
used_capacity = [49, 45, 45, 35, 23, 22];
duration = [3, 3, 3, 3, 3, 2];
distance_traveled = [146, 162, 166, 148, 167, 140];
_objective = 167;
_____________________________________________________________
8:
assignment = [10, 3, 2, 7, 9, 4, 8, 5, 1, 6];
start = [1, 3, 5, 6, 7, 8, 9, 10];
end = [2, 4, 5, 6, 7, 8, 9, 10];
used_capacity = [37, 34, 24, 16, 16, 14, 10, 7];
duration = [2, 2, 1, 1, 1, 1, 1, 1];
distance_traveled = [147, 139, 164, 80, 140, 106, 186, 152];
_objective = 186;
_____________________________________________________________
9:
assignment = [13, 9, 5, 2, 4, 11, 7, 10, 6, 8, 1, 3, 12];
start = [1, 3, 5, 7, 8, 9, 10, 11, 12, 13];
end = [2, 4, 6, 7, 8, 9, 10, 11, 12, 13];
used_capacity = [34, 25, 22, 21, 21, 20, 4, 4, 3, 3];
duration = [2, 2, 2, 1, 1, 1, 1, 1, 1, 1];
distance_traveled = [382, 216, 228, 214, 48, 90, 436, 108, 56, 46];
_objective = 436;
_____________________________________________________________
10:
assignment = [5, 7, 2, 4, 8, 11, 10, 9, 1, 12, 6, 3, 13];
start = [1, 3, 5, 7, 8, 9, 10, 11, 12, 13];
end = [2, 4, 6, 7, 8, 9, 10, 11, 12, 13];
used_capacity = [31, 25, 25, 25, 25, 22, 21, 12, 10, 6];
duration = [2, 2, 2, 1, 1, 1, 1, 1, 1, 1];
distance_traveled = [173, 158, 216, 80, 228, 114, 244, 206, 66, 198];
_objective = 244;
_____________________________________________________________
11:
assignment = [140, 139, 132, 126, 124, 106, 89, 31, 24, 18, 83, 80, 70, 68, 61, 59, 50, 28, 130, 121, 99, 98, 79, 54, 52, 21, 142, 141, 119, 113, 97, 91, 85, 81, 107, 77, 69, 67, 64, 57, 40, 5, 55, 45, 42, 39, 35, 22, 8, 2, 135, 125, 114, 110, 101, 92, 84, 133, 129, 62, 41, 26, 14, 7, 115, 78, 75, 51, 47, 38, 23, 117, 112, 108, 74, 73, 6, 3, 128, 123, 96, 86, 76, 71, 60, 131, 36, 32, 30, 29, 27, 25, 137, 134, 122, 120, 118, 88, 87, 138, 66, 65, 20, 19, 15, 13, 116, 95, 94, 93, 82, 63, 4, 143, 127, 111, 102, 100, 58, 136, 104, 103, 72, 33, 1, 53, 48, 37, 34, 12, 10, 109, 105, 90, 49, 44, 43, 56, 46, 17, 16, 11, 9];
start = [1, 11, 19, 27, 35, 43, 51, 58, 65, 72, 79, 86, 93, 100, 107, 114, 120, 126, 132, 138];
end = [10, 18, 26, 34, 42, 50, 57, 64, 71, 78, 85, 92, 99, 106, 113, 119, 125, 131, 137, 143];
used_capacity = [146, 144, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 94, 94, 94, 90, 88, 87, 86, 85];
duration = [10, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6];
distance_traveled = [959, 785, 703, 696, 678, 557, 596, 678, 471, 566, 702, 506, 782, 513, 796, 644, 449, 600, 639, 483];
_objective = 959;
_____________________________________________________________
12:
assignment = [8, 11, 18, 22, 33, 52, 61, 1, 4, 7, 9, 10, 57, 85, 86, 88, 92, 25, 58, 60, 63, 87, 15, 30, 50, 93, 95, 16, 19, 20, 24, 26, 32, 35, 47, 49, 70, 41, 42, 65, 75, 80, 21, 27, 43, 69, 71, 29, 31, 34, 37, 46, 40, 45, 51, 78, 81, 44, 48, 76, 79, 90, 2, 3, 5, 6, 12, 14, 17, 28, 64, 36, 38, 54, 67, 13, 23, 53, 62, 55, 56, 66, 91, 59, 68, 72, 82, 74, 77, 89, 94, 39, 73, 83, 84];
start = [1, 8, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 72, 76, 80, 84, 88, 92];
end = [7, 12, 17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 71, 75, 79, 83, 87, 91, 95];
used_capacity = [92, 86, 85, 85, 85, 83, 83, 83, 76, 74, 56, 54, 51, 50, 38, 34, 33, 32, 15, 15];
duration = [7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4];
distance_traveled = [548, 456, 377, 229, 401, 371, 373, 414, 432, 359, 432, 380, 453, 371, 385, 456, 244, 319, 263, 451];
_objective = 548;
_____________________________________________________________
13:
assignment = [3, 7, 10, 12, 21, 24, 32, 35, 36, 38, 40, 41, 42, 43, 46, 47, 2, 6, 9, 11, 15, 16, 20, 28, 29, 30, 31, 33, 34, 37, 39, 44, 1, 4, 5, 8, 13, 14, 17, 18, 19, 22, 23, 25, 26, 27, 45];
start = [1, 17, 33];
end = [16, 32, 47];
used_capacity = [261, 198, 188];
duration = [16, 16, 15];
distance_traveled = [966, 992, 958];
_objective = 992;
_____________________________________________________________
14:
assignment = [215, 206, 195, 194, 97, 95, 75, 37, 29, 28, 9, 173, 170, 168, 166, 165, 164, 157, 105, 86, 85, 12, 197, 175, 137, 94, 89, 87, 84, 77, 40, 23, 21, 210, 182, 167, 163, 161, 160, 152, 136, 127, 54, 15, 148, 91, 82, 67, 59, 38, 24, 8, 7, 4, 2, 187, 138, 115, 96, 90, 83, 80, 73, 72, 48, 42, 204, 190, 158, 156, 155, 126, 120, 118, 117, 61, 45, 189, 185, 147, 145, 141, 98, 88, 68, 64, 27, 1, 214, 213, 212, 211, 208, 178, 142, 133, 122, 100, 81, 207, 103, 71, 46, 44, 39, 35, 22, 20, 19, 13, 209, 200, 198, 193, 121, 114, 49, 47, 36, 32, 26, 123, 119, 107, 106, 102, 70, 65, 63, 41, 31, 5, 177, 162, 144, 113, 69, 62, 57, 53, 43, 18, 3, 199, 186, 184, 171, 159, 149, 139, 60, 58, 56, 52, 191, 183, 176, 174, 153, 78, 76, 74, 25, 17, 10, 203, 202, 201, 196, 179, 172, 169, 154, 143, 131, 128, 188, 180, 151, 146, 140, 109, 108, 104, 101, 99, 92, 135, 134, 132, 130, 129, 125, 124, 112, 111, 93, 205, 192, 79, 34, 33, 30, 14, 11, 6, 181, 150, 116, 110, 66, 55, 51, 50, 16];
start = [1, 12, 23, 34, 45, 56, 67, 78, 89, 100, 111, 122, 133, 144, 155, 166, 177, 188, 198, 207];
end = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 197, 206, 215];
used_capacity = [186, 182, 182, 182, 170, 169, 168, 137, 137, 119, 118, 116, 115, 115, 114, 111, 106, 106, 102, 100];
duration = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 9, 9];
distance_traveled = [1271, 1135, 1076, 1138, 1156, 863, 1071, 1216, 939, 1083, 989, 1212, 920, 843, 946, 1000, 661, 1044, 805, 746];
_objective = 1271;
_____________________________________________________________
15:
assignment = [224, 221, 220, 215, 208, 43, 39, 33, 31, 25, 19, 12, 1, 225, 216, 210, 200, 173, 145, 98, 88, 47, 44, 37, 29, 161, 155, 152, 150, 147, 142, 129, 124, 108, 101, 91, 45, 179, 132, 126, 107, 106, 92, 89, 83, 68, 57, 54, 53, 229, 192, 184, 183, 115, 85, 80, 71, 60, 32, 22, 14, 226, 222, 214, 212, 211, 193, 191, 144, 143, 136, 109, 97, 185, 99, 96, 87, 77, 70, 69, 67, 63, 34, 30, 23, 148, 105, 86, 50, 46, 41, 40, 38, 24, 11, 9, 4, 182, 178, 172, 162, 158, 156, 137, 135, 122, 18, 17, 15, 190, 171, 127, 120, 113, 66, 65, 64, 61, 55, 52, 51, 195, 166, 131, 128, 123, 104, 103, 102, 94, 73, 58, 36, 232, 230, 218, 217, 206, 205, 151, 133, 125, 114, 90, 82, 236, 223, 213, 203, 176, 165, 140, 139, 138, 95, 84, 59, 219, 207, 204, 202, 189, 187, 149, 112, 110, 93, 78, 56, 199, 198, 188, 160, 121, 118, 79, 76, 48, 42, 27, 13, 231, 168, 146, 141, 134, 130, 119, 117, 20, 8, 7, 5, 234, 228, 177, 175, 157, 153, 116, 72, 28, 26, 16, 10, 233, 209, 201, 197, 196, 170, 169, 164, 81, 49, 35, 3, 227, 194, 186, 181, 180, 174, 167, 163, 159, 154, 111, 100, 239, 238, 237, 235, 75, 74, 62, 21, 6, 2];
start = [1, 14, 26, 38, 50, 62, 74, 86, 98, 110, 122, 134, 146, 158, 170, 182, 194, 206, 218, 230];
end = [13, 25, 37, 49, 61, 73, 85, 97, 109, 121, 133, 145, 157, 169, 181, 193, 205, 217, 229, 239];
used_capacity = [186, 185, 185, 182, 178, 178, 178, 177, 161, 158, 158, 157, 157, 157, 157, 157, 157, 157, 156, 154];
duration = [13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10];
distance_traveled = [1140, 804, 989, 1045, 918, 799, 824, 1134, 710, 905, 932, 704, 806, 1074, 1026, 818, 1075, 938, 904, 700];
_objective = 1140;
_____________________________________________________________
16:
assignment = [10, 43, 46, 16, 21, 41, 12, 24, 34, 1, 31, 45, 20, 33, 36, 3, 25, 39, 2, 19, 22, 23, 38, 8, 13, 11, 42, 26, 47, 27, 37, 30, 35, 4, 29, 14, 32, 6, 18, 7, 28, 40, 44, 9, 17, 5, 15];
start = [1, 4, 7, 10, 13, 16, 19, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46];
end = [3, 6, 9, 12, 15, 18, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47];
used_capacity = [61, 58, 47, 47, 45, 43, 32, 29, 29, 29, 27, 27, 27, 25, 25, 22, 22, 18, 18, 16];
duration = [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];
distance_traveled = [276, 252, 203, 217, 224, 281, 284, 165, 286, 158, 183, 151, 124, 197, 111, 269, 124, 195, 231, 233];
_objective = 286;
_____________________________________________________________
17:
assignment = [3, 5, 6, 21, 30, 31, 40, 56, 68, 88, 106, 116, 124, 130, 143, 145, 154, 167, 169, 186, 189, 197, 211, 212, 217, 224, 231, 257, 264, 266, 274, 286, 20, 46, 48, 60, 65, 79, 80, 83, 90, 113, 127, 161, 168, 171, 172, 173, 175, 176, 190, 201, 203, 252, 256, 51, 136, 144, 182, 187, 195, 202, 208, 213, 225, 227, 229, 244, 39, 41, 109, 129, 135, 137, 188, 194, 209, 220, 246, 247, 262, 52, 53, 98, 101, 111, 112, 115, 118, 181, 206, 214, 215, 228, 67, 70, 71, 72, 75, 76, 77, 81, 89, 92, 95, 100, 104, 105, 107, 163, 166, 180, 191, 200, 205, 207, 216, 240, 245, 248, 99, 110, 141, 151, 152, 153, 156, 157, 158, 159, 160, 162, 242, 54, 55, 74, 85, 87, 91, 97, 103, 108, 121, 125, 131, 132, 57, 58, 59, 62, 64, 86, 117, 120, 123, 128, 133, 134, 192, 2, 4, 7, 8, 9, 10, 14, 16, 17, 18, 25, 26, 33, 45, 93, 119, 138, 139, 140, 142, 146, 147, 148, 150, 155, 183, 63, 69, 78, 126, 230, 249, 250, 251, 253, 254, 260, 284, 287, 174, 177, 196, 219, 221, 222, 232, 233, 234, 236, 238, 239, 263, 1, 204, 226, 243, 259, 268, 269, 271, 277, 278, 279, 281, 285, 11, 12, 13, 32, 178, 184, 185, 198, 210, 223, 237, 258, 261, 19, 22, 23, 24, 27, 37, 42, 43, 94, 96, 114, 164, 165, 170, 179, 193, 241, 265, 267, 270, 272, 273, 275, 276, 282, 283, 15, 44, 47, 49, 50, 61, 73, 82, 102, 122, 149, 218, 28, 29, 34, 35, 36, 38, 66, 84, 199, 235, 255, 280];
start = [1, 33, 56, 69, 82, 95, 108, 121, 134, 147, 160, 173, 186, 199, 212, 225, 238, 251, 264, 276];
end = [32, 55, 68, 81, 94, 107, 120, 133, 146, 159, 172, 185, 198, 211, 224, 237, 250, 263, 275, 287];
used_capacity = [210, 210, 210, 210, 210, 200, 200, 195, 195, 195, 195, 195, 195, 190, 190, 180, 173, 172, 150, 150];
duration = [32, 23, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12];
distance_traveled = [2415, 1991, 1016, 1471, 1201, 1236, 1157, 961, 1423, 1077, 1110, 1015, 1278, 1075, 883, 1476, 975, 1188, 1237, 958];
_objective = 2415;
_____________________________________________________________
18:
assignment = [74, 81, 116, 124, 132, 149, 157, 160, 169, 171, 177, 183, 184, 76, 82, 83, 84, 93, 95, 99, 117, 119, 123, 135, 176, 31, 88, 107, 113, 144, 150, 155, 158, 159, 166, 2, 8, 18, 22, 35, 86, 102, 118, 142, 161, 13, 32, 33, 39, 47, 69, 92, 101, 106, 151, 9, 16, 26, 37, 38, 72, 77, 79, 87, 112, 5, 6, 14, 28, 63, 80, 115, 121, 175, 185, 20, 24, 42, 43, 44, 51, 53, 67, 68, 3, 36, 45, 48, 57, 58, 62, 64, 97, 19, 49, 54, 56, 61, 66, 104, 130, 186, 11, 41, 52, 60, 71, 140, 143, 180, 188, 90, 122, 167, 168, 170, 179, 189, 190, 191, 1, 4, 23, 34, 65, 96, 103, 127, 174, 12, 29, 73, 89, 98, 109, 110, 137, 164, 10, 17, 30, 40, 50, 55, 85, 91, 120, 21, 25, 46, 105, 133, 146, 152, 163, 182, 75, 94, 128, 129, 138, 139, 165, 172, 173, 100, 108, 111, 131, 147, 153, 178, 181, 187, 7, 15, 27, 59, 70, 126, 145, 148, 154, 78, 114, 125, 134, 136, 141, 156, 162];
start = [1, 14, 26, 36, 46, 56, 66, 76, 85, 94, 103, 112, 121, 130, 139, 148, 157, 166, 175, 184];
end = [13, 25, 35, 45, 55, 65, 75, 84, 93, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 191];
used_capacity = [147, 147, 147, 147, 147, 147, 137, 136, 136, 136, 136, 136, 136, 136, 121, 114, 92, 92, 41, 41];
duration = [13, 12, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8];
distance_traveled = [1009, 902, 1124, 1089, 550, 689, 665, 687, 700, 494, 863, 805, 731, 639, 1075, 991, 715, 1082, 673, 672];
_objective = 1124;
_____________________________________________________________
19:
assignment = [5, 16, 22, 29, 30, 31, 37, 41, 47, 42, 58, 60, 64, 48, 52, 67, 69, 32, 44, 56, 63, 12, 19, 35, 39, 8, 20, 25, 54, 51, 59, 61, 65, 1, 23, 26, 68, 18, 21, 43, 66, 6, 10, 27, 71, 4, 11, 33, 70, 40, 45, 50, 55, 38, 53, 62, 15, 24, 57, 3, 17, 49, 7, 9, 28, 14, 34, 46, 2, 13, 36];
start = [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 57, 60, 63, 66, 69, 71];
end = [5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 56, 59, 62, 65, 68, 70, 71];
used_capacity = [82, 77, 77, 76, 76, 68, 62, 47, 40, 36, 36, 35, 35, 35, 35, 34, 34, 22, 11, 10];
duration = [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 1];
distance_traveled = [332, 318, 314, 183, 290, 332, 300, 331, 335, 286, 280, 293, 318, 307, 341, 320, 293, 185, 214, 100];
_objective = 341;
_____________________________________________________________
20:
assignment = [3, 7, 9, 14, 15, 23, 46, 47, 48, 56, 62, 69, 84, 98, 105, 107, 116, 121, 152, 187, 58, 61, 64, 65, 71, 104, 112, 114, 122, 129, 132, 134, 147, 151, 153, 159, 169, 199, 232, 266, 11, 16, 20, 24, 45, 49, 53, 59, 63, 66, 67, 75, 82, 88, 101, 106, 108, 109, 115, 117, 120, 126, 127, 128, 130, 131, 141, 142, 144, 145, 146, 148, 161, 162, 163, 167, 171, 174, 176, 200, 18, 42, 55, 68, 83, 85, 94, 96, 102, 137, 138, 150, 175, 202, 206, 207, 212, 213, 214, 218, 26, 28, 35, 37, 39, 78, 86, 92, 99, 100, 125, 236, 247, 249, 251, 258, 260, 277, 278, 2, 6, 10, 17, 43, 80, 91, 95, 118, 119, 139, 168, 180, 181, 182, 183, 185, 186, 189, 194, 195, 196, 197, 198, 201, 203, 204, 205, 208, 209, 215, 219, 220, 226, 231, 237, 238, 243, 274, 282, 283, 285, 4, 5, 44, 57, 70, 72, 87, 89, 103, 110, 136, 143, 34, 79, 81, 90, 123, 140, 155, 156, 158, 164, 165, 166, 33, 41, 50, 111, 178, 179, 239, 241, 262, 264, 273, 276, 12, 13, 19, 21, 22, 30, 40, 73, 124, 149, 154, 160, 234, 235, 240, 242, 244, 245, 248, 250, 252, 253, 255, 263, 1, 8, 27, 31, 32, 36, 74, 76, 224, 230, 259, 25, 29, 38, 51, 54, 60, 93, 133, 135, 184, 188, 190, 191, 192, 193, 217, 267, 271, 275, 279, 284, 286, 52, 77, 97, 113, 157, 173, 227, 254, 261, 268, 269, 216, 229, 233, 246, 256, 257, 265, 270, 272, 280, 287, 170, 172, 177, 210, 211, 221, 222, 223, 225, 228, 281];
start = [1, 21, 41, 61, 81, 101, 120, 135, 149, 162, 174, 186, 198, 210, 222, 233, 244, 255, 266, 277];
end = [20, 40, 60, 80, 100, 119, 134, 148, 161, 173, 185, 197, 209, 221, 232, 243, 254, 265, 276, 287];
used_capacity = [195, 195, 190, 190, 190, 190, 190, 184, 184, 183, 183, 183, 180, 178, 178, 178, 178, 178, 173, 165];
duration = [20, 20, 20, 20, 20, 19, 15, 14, 13, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11];
distance_traveled = [1613, 1435, 1524, 1488, 1774, 1383, 1177, 1287, 1018, 1130, 1463, 968, 742, 982, 900, 756, 1064, 757, 1031, 658];
_objective = 1774;
_____________________________________________________________
21:
assignment = [143, 130, 129, 117, 116, 108, 104, 83, 79, 49, 11, 136, 125, 99, 84, 76, 59, 58, 52, 45, 33, 20, 141, 138, 137, 134, 124, 102, 100, 98, 91, 16, 133, 127, 122, 115, 107, 101, 95, 92, 89, 7, 118, 110, 109, 105, 96, 93, 87, 142, 135, 131, 90, 61, 57, 5, 78, 69, 62, 39, 35, 34, 25, 53, 50, 46, 37, 31, 29, 24, 81, 80, 71, 56, 38, 28, 3, 139, 128, 123, 94, 64, 55, 121, 27, 26, 23, 13, 12, 106, 43, 41, 15, 10, 2, 119, 111, 63, 60, 54, 48, 140, 126, 114, 103, 74, 19, 73, 67, 22, 17, 14, 9, 72, 66, 51, 47, 44, 42, 112, 88, 77, 68, 40, 36, 86, 85, 70, 65, 4, 1, 132, 97, 32, 30, 18, 6, 120, 113, 82, 75, 21, 8];
start = [1, 12, 23, 33, 43, 50, 57, 64, 71, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138];
end = [11, 22, 32, 42, 49, 56, 63, 70, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143];
used_capacity = [135, 135, 135, 105, 104, 103, 103, 103, 103, 103, 80, 75, 66, 63, 63, 63, 60, 57, 55, 54];
duration = [11, 11, 10, 10, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6];
distance_traveled = [931, 1162, 931, 999, 600, 986, 493, 709, 618, 557, 484, 351, 873, 762, 673, 618, 889, 533, 466, 655];
_objective = 1162;
"""